¯:
LC:\code\apiCsharp-5-Exercises\recursividad.Api\src\Services\PuzzleService.cs
	namespace 	
recursividad
 
. 
Api 
. 
Services #
;# $
public 
class 
PuzzleService 
: 
IPuzzleService +
{ 
private		 
readonly		 
List		 
<		 
(		 
string		 !
Name		" &
,		& '
int		( +
ValueInCents		, 8
)		8 9
>		9 :
_denominations		; I
=		J K
new		L O
(		O P
)		P Q
{

 
( 	
$str	 
, 
$num 
) 
, 
( 
$str )
,) *
$num+ /
)/ 0
,0 1
(2 3
$str3 =
,= >
$num? C
)C D
,D E
( 	
$str	 
, 
$num 
) 
, 
( 
$str &
,& '
$num( +
)+ ,
,, -
(. /
$str/ 7
,7 8
$num9 <
)< =
,= >
( 	
$str	 
, 
$num 
) 
, 
( 
$str +
,+ ,
$num- /
)/ 0
,0 1
(2 3
$str3 >
,> ?
$num@ A
)A B
} 
; 
public 
 
ChangeMakingResponse "
CalculateMinimumChange  6
(6 7
decimal7 >
	amountDue? H
,H I
decimalJ Q

amountPaidR \
)\ ]
{ 
if 

( 

amountPaid 
< 
	amountDue "
)" #
{ 	
throw 
new 
ArgumentException '
(' (
$str( ^
)^ _
;_ `
} 	
var 
totalChange 
= 

amountPaid $
-% &
	amountDue' 0
;0 1
var 
totalChangeInCents 
=  
(! "
long" &
)& '
(' (
totalChange( 3
*4 5
$num6 9
)9 :
;: ;
var 
	breakdown 
= 
new 

Dictionary &
<& '
string' -
,- .
int/ 2
>2 3
(3 4
)4 5
;5 6$
CalculateChangeRecursive  
(  !
totalChangeInCents! 3
,3 4
$num5 6
,6 7
	breakdown8 A
)A B
;B C
return 
new  
ChangeMakingResponse '
(' (
totalChange( 3
,3 4
	breakdown5 >
)> ?
;? @
} 
private   
void   $
CalculateChangeRecursive   )
(  ) *
long  * .
remainingCents  / =
,  = >
int  ? B
denominationIndex  C T
,  T U

Dictionary  V `
<  ` a
string  a g
,  g h
int  i l
>  l m
	breakdown  n w
)  w x
{!! 
if"" 

("" 
remainingCents"" 
=="" 
$num"" 
||""  "
denominationIndex""# 4
>=""5 7
_denominations""8 F
.""F G
Count""G L
)""L M
{## 	
return$$ 
;$$ 
}%% 	
var'' 
currentDenomination'' 
=''  !
_denominations''" 0
[''0 1
denominationIndex''1 B
]''B C
;''C D
var(( 
	coinCount(( 
=(( 
((( 
int(( 
)(( 
((( 
remainingCents(( ,
/((- .
currentDenomination((/ B
.((B C
ValueInCents((C O
)((O P
;((P Q
	breakdown)) 
.)) 
Add)) 
()) 
currentDenomination)) )
.))) *
Name))* .
,)). /
	coinCount))0 9
)))9 :
;)): ;
var** 
newRemainingCents** 
=** 
remainingCents**  .
%**/ 0
currentDenomination**1 D
.**D E
ValueInCents**E Q
;**Q R$
CalculateChangeRecursive++  
(++  !
newRemainingCents++! 2
,++2 3
denominationIndex++4 E
+++F G
$num++H I
,++I J
	breakdown++K T
)++T U
;++U V
},, 
public// 

HanoiResponse// 
SolveTowersOfHanoi// +
(//+ ,
int//, /
numberOfDisks//0 =
)//= >
{00 
if11 

(11 
numberOfDisks11 
<=11 
$num11 
)11 
{22 	
throw33 
new33 
ArgumentException33 '
(33' (
$str33( P
)33P Q
;33Q R
}44 	
var66 
moves66 
=66 
new66 
List66 
<66 
string66 #
>66# $
(66$ %
)66% &
;66& '
HanoiRecursive88 
(88 
numberOfDisks88 $
,88$ %
$char88& )
,88) *
$char88+ .
,88. /
$char880 3
,883 4
moves885 :
)88: ;
;88; <
return:: 
new:: 
HanoiResponse::  
(::  !
moves::! &
)::& '
;::' (
};; 
private== 
void== 
HanoiRecursive== 
(==  
int==  #
n==$ %
,==% &
char==' +
source==, 2
,==2 3
char==4 8
destination==9 D
,==D E
char==F J
	auxiliary==K T
,==T U
List==V Z
<==Z [
string==[ a
>==a b
moves==c h
)==h i
{>> 
if@@ 

(@@ 
n@@ 
==@@ 
$num@@ 
)@@ 
{AA 	
movesBB 
.BB 
AddBB 
(BB 
$"BB 
$strBB )
{BB) *
sourceBB* 0
}BB0 1
$strBB1 4
{BB4 5
destinationBB5 @
}BB@ A
"BBA B
)BBB C
;BBC D
returnCC 
;CC 
}DD 	
HanoiRecursiveGG 
(GG 
nGG 
-GG 
$numGG 
,GG 
sourceGG $
,GG$ %
	auxiliaryGG& /
,GG/ 0
destinationGG1 <
,GG< =
movesGG> C
)GGC D
;GGD E
movesJJ 
.JJ 
AddJJ 
(JJ 
$"JJ 
$strJJ  
{JJ  !
nJJ! "
}JJ" #
$strJJ# '
{JJ' (
sourceJJ( .
}JJ. /
$strJJ/ 2
{JJ2 3
destinationJJ3 >
}JJ> ?
"JJ? @
)JJ@ A
;JJA B
HanoiRecursiveMM 
(MM 
nMM 
-MM 
$numMM 
,MM 
	auxiliaryMM '
,MM' (
destinationMM) 4
,MM4 5
sourceMM6 <
,MM< =
movesMM> C
)MMC D
;MMD E
}NN 
}OO Ì 
JC:\code\apiCsharp-5-Exercises\recursividad.Api\src\Services\MathService.cs
	namespace 	
recursividad
 
. 
Api 
. 
Services #
;# $
public 
class 
MathService 
: 
IMathService '
{ 
public 

long 
CalculateFactorial "
(" #
int# &
number' -
)- .
{		 
if

 

(

 
number

 
<

 
$num

 
)

 
{ 	
throw 
new 
ArgumentException '
(' (
$str( J
)J K
;K L
} 	
return 
FactorialRecursive !
(! "
number" (
)( )
;) *
} 
private 
long 
FactorialRecursive #
(# $
int$ '
n( )
)) *
{ 
if 

( 
n 
== 
$num 
) 
return 
$num 
; 
return 
n 
* 
FactorialRecursive %
(% &
n& '
-( )
$num* +
)+ ,
;, -
} 
public 

List 
< 
long 
> 
GenerateFibonacci '
(' (
int( +
count, 1
)1 2
{ 
if 

( 
count 
<= 
$num 
) 
{ 	
throw 
new 
ArgumentException '
(' (
$str( U
)U V
;V W
} 	
var 
series 
= 
new 
List 
< 
long "
>" #
(# $
)$ %
;% &
for   
(   
int   
i   
=   
$num   
;   
i   
<   
count   !
;  ! "
i  # $
++  $ &
)  & '
{!! 	
series"" 
."" 
Add"" 
("" 
FibonacciRecursive"" )
("") *
i""* +
)""+ ,
)"", -
;""- .
}## 	
return$$ 
series$$ 
;$$ 
}%% 
private'' 
long'' 
FibonacciRecursive'' #
(''# $
int''$ '
n''( )
)'') *
{(( 
if** 

(** 
n** 
<=** 
$num** 
)** 
{++ 	
return,, 
n,, 
;,, 
}-- 	
return// 
FibonacciRecursive// !
(//! "
n//" #
-//$ %
$num//& '
)//' (
+//) *
FibonacciRecursive//+ =
(//= >
n//> ?
-//@ A
$num//B C
)//C D
;//D E
}00 
public33 

int33 
CalculateMcd33 
(33 
int33 
numberA33  '
,33' (
int33) ,
numberB33- 4
)334 5
{44 
return66 
McdRecursive66 
(66 
Math66  
.66  !
Abs66! $
(66$ %
numberA66% ,
)66, -
,66- .
Math66/ 3
.663 4
Abs664 7
(667 8
numberB668 ?
)66? @
)66@ A
;66A B
}77 
private99 
int99 
McdRecursive99 
(99 
int99  
a99! "
,99" #
int99$ '
b99( )
)99) *
{:: 
if<< 

(<< 
b<< 
==<< 
$num<< 
)<< 
{== 	
return>> 
a>> 
;>> 
}?? 	
returnAA 
McdRecursiveAA 
(AA 
bAA 
,AA 
aAA  
%AA! "
bAA# $
)AA$ %
;AA% &
}BB 
}CC Æ
UC:\code\apiCsharp-5-Exercises\recursividad.Api\src\Services\Contracts\IMathService.cs
	namespace 	
recursividad
 
. 
Api 
. 
Services #
.# $
	Contracts$ -
;- .
public 
	interface 
IMathService 
{ 
long 
CalculateFactorial	 
( 
int 
number  &
)& '
;' (
List 
< 	
long	 
> 
GenerateFibonacci  
(  !
int! $
count% *
)* +
;+ ,
int 
CalculateMcd 
( 
int 
numberA  
,  !
int" %
numberB& -
)- .
;. /
} Ð
WC:\code\apiCsharp-5-Exercises\recursividad.Api\src\Services\Contracts\IPuzzleService.cs
	namespace 	
recursividad
 
. 
Api 
. 
Services #
.# $
	Contracts$ -
;- .
public 
	interface 
IPuzzleService 
{  
ChangeMakingResponse "
CalculateMinimumChange /
(/ 0
decimal0 7
	amountDue8 A
,A B
decimalC J

amountPaidK U
)U V
;V W
HanoiResponse 
SolveTowersOfHanoi $
($ %
int% (
numberOfDisks) 6
)6 7
;7 8
}		 á
LC:\code\apiCsharp-5-Exercises\recursividad.Api\src\Models\DTOs\PuzzleDtos.cs
	namespace 	
recursividad
 
. 
Api 
. 
Models !
.! "
DTOs" &
;& '
public 
record 
ChangeMakingRequest !
(! "
decimal" )
	AmountDue* 3
,3 4
decimal5 <

AmountPaid= G
)G H
;H I
public 
record  
ChangeMakingResponse "
(" #
decimal# *
TotalChange+ 6
,6 7

Dictionary8 B
<B C
stringC I
,I J
intK N
>N O
CoinBreakdownP ]
)] ^
;^ _
public 
record 
HanoiRequest 
( 
int 
NumberOfDisks ,
), -
;- .
public 
record 
HanoiResponse 
( 
List  
<  !
string! '
>' (
Moves) .
). /
;/ 0Ò	
JC:\code\apiCsharp-5-Exercises\recursividad.Api\src\Models\DTOs\MathDtos.cs
	namespace 	
recursividad
 
. 
Api 
. 
Models !
.! "
DTOs" &
;& '
public 
record 
FactorialRequest 
( 
int "
Number# )
)) *
;* +
public 
record 
FactorialResponse 
(  
long  $
Result% +
)+ ,
;, -
public

 
record

 
FibonacciRequest

 
(

 
int

 "
Count

# (
)

( )
;

) *
public 
record 
FibonacciResponse 
(  
List  $
<$ %
long% )
>) *
Sequence+ 3
)3 4
;4 5
public 
record 

McdRequest 
( 
int 
NumberA $
,$ %
int& )
NumberB* 1
)1 2
;2 3
public 
record 
McdResponse 
( 
int 
Result $
)$ %
;% &õ
SC:\code\apiCsharp-5-Exercises\recursividad.Api\src\Controllers\PuzzlesController.cs
	namespace 	
recursividad
 
. 
Api 
. 
Controllers &
;& '
[ 
ApiController 
] 
[ 
Route 
( 
$str 
) 
] 
public		 
class		 
PuzzlesController		 
:		  
ControllerBase		! /
{

 
private 
readonly 
IPuzzleService #
_puzzleService$ 2
;2 3
public 

PuzzlesController 
( 
IPuzzleService +
puzzleService, 9
)9 :
{ 
_puzzleService 
= 
puzzleService &
;& '
} 
[ 
HttpPost 
( 
$str 
) 
] 
public 

IActionResult 
GetMinimumChange )
() *
[* +
FromBody+ 3
]3 4
ChangeMakingRequest5 H
requestI P
)P Q
{ 
try 
{ 	
var 
response 
= 
_puzzleService )
.) *"
CalculateMinimumChange* @
(@ A
requestA H
.H I
	AmountDueI R
,R S
requestT [
.[ \

AmountPaid\ f
)f g
;g h
return 
Ok 
( 
response 
) 
;  
} 	
catch 
( 
ArgumentException  
ex! #
)# $
{ 	
return 

BadRequest 
( 
ex  
.  !
Message! (
)( )
;) *
} 	
} 
["" 
HttpPost"" 
("" 
$str"" 
)""  
]""  !
public## 

IActionResult## 
GetHanoiSolution## )
(##) *
[##* +
FromBody##+ 3
]##3 4
HanoiRequest##5 A
request##B I
)##I J
{$$ 
try%% 
{&& 	
var'' 
response'' 
='' 
_puzzleService'' )
.'') *
SolveTowersOfHanoi''* <
(''< =
request''= D
.''D E
NumberOfDisks''E R
)''R S
;''S T
return(( 
Ok(( 
((( 
response(( 
)(( 
;((  
})) 	
catch** 
(** 
ArgumentException**  
ex**! #
)**# $
{++ 	
return,, 

BadRequest,, 
(,, 
ex,,  
.,,  !
Message,,! (
),,( )
;,,) *
}-- 	
}.. 
}// ç!
PC:\code\apiCsharp-5-Exercises\recursividad.Api\src\Controllers\MathController.cs
	namespace 	
recursividad
 
. 
Api 
. 
Controllers &
;& '
[ 
ApiController 
] 
[ 
Route 
( 
$str 
) 
] 
public		 
class		 
MathController		 
:		 
ControllerBase		 ,
{

 
private 
readonly 
IMathService !
_mathService" .
;. /
public 

MathController 
( 
IMathService &
mathService' 2
)2 3
{ 
_mathService 
= 
mathService "
;" #
} 
[ 
HttpPost 
( 
$str 
) 
] 
public 

IActionResult 
GetFactorial %
(% &
[& '
FromBody' /
]/ 0
FactorialRequest1 A
requestB I
)I J
{ 
try 
{ 	
var 
result 
= 
_mathService %
.% &
CalculateFactorial& 8
(8 9
request9 @
.@ A
NumberA G
)G H
;H I
var 
response 
= 
new 
FactorialResponse 0
(0 1
result1 7
)7 8
;8 9
return 
Ok 
( 
response 
) 
;  
} 	
catch 
( 
ArgumentException  
ex! #
)# $
{ 	
return 

BadRequest 
( 
ex  
.  !
Message! (
)( )
;) *
} 	
}   
[## 
HttpPost## 
(## 
$str## 
)## 
]## 
public$$ 

IActionResult$$ 
GetFibonacci$$ %
($$% &
[$$& '
FromBody$$' /
]$$/ 0
FibonacciRequest$$1 A
request$$B I
)$$I J
{%% 
try&& 
{'' 	
var(( 
result(( 
=(( 
_mathService(( %
.((% &
GenerateFibonacci((& 7
(((7 8
request((8 ?
.((? @
Count((@ E
)((E F
;((F G
var)) 
response)) 
=)) 
new)) 
FibonacciResponse)) 0
())0 1
result))1 7
)))7 8
;))8 9
return** 
Ok** 
(** 
response** 
)** 
;**  
}++ 	
catch,, 
(,, 
ArgumentException,,  
ex,,! #
),,# $
{-- 	
return.. 

BadRequest.. 
(.. 
ex..  
...  !
Message..! (
)..( )
;..) *
}// 	
}00 
[33 
HttpPost33 
(33 
$str33 
)33 
]33 
public44 

IActionResult44 
GetMcd44 
(44  
[44  !
FromBody44! )
]44) *

McdRequest44+ 5
request446 =
)44= >
{55 
try66 
{77 	
var88 
result88 
=88 
_mathService88 %
.88% &
CalculateMcd88& 2
(882 3
request883 :
.88: ;
NumberA88; B
,88B C
request88D K
.88K L
NumberB88L S
)88S T
;88T U
var99 
response99 
=99 
new99 
McdResponse99 *
(99* +
result99+ 1
)991 2
;992 3
return:: 
Ok:: 
(:: 
response:: 
):: 
;::  
};; 	
catch<< 
(<< 
	Exception<< 
ex<< 
)<< 
{== 	
return?? 

BadRequest?? 
(?? 
ex??  
.??  !
Message??! (
)??( )
;??) *
}@@ 	
}AA 
}BB 

9C:\code\apiCsharp-5-Exercises\recursividad.Api\Program.cs
var 
builder 
= 
WebApplication 
. 
CreateBuilder *
(* +
args+ /
)/ 0
;0 1
builder

 
.

 
Services

 
.

 
AddControllers

 
(

  
)

  !
;

! "
builder 
. 
Services 
. 
	AddScoped 
< 
IMathService '
,' (
MathService) 4
>4 5
(5 6
)6 7
;7 8
builder 
. 
Services 
. 
	AddScoped 
< 
IPuzzleService )
,) *
PuzzleService+ 8
>8 9
(9 :
): ;
;; <
var 
app 
= 	
builder
 
. 
Build 
( 
) 
; 
app 
. 
UseHttpsRedirection 
( 
) 
; 
app 
. 
MapControllers 
( 
) 
; 
app 
. 
Run 
( 
) 	
;	 
